#!/usr/bin/env bash
export BASE_DIR
export CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/ani-man"
export LOG_FILE="${CONFIG_DIR}/ani-man.log"
export LIBRARY="${CONFIG_DIR}/anime.txt"
export EXTERNAL_CONF="${CONFIG_DIR}/ani-man.conf"
export DIRS_FILE="${CONFIG_DIR}/.valid_dirs"
export EPISODES_FILE="${CONFIG_DIR}/.valid_episodes"
export FILTERS_LIST="${CONFIG_DIR}/ani-man.filters"

active_create() {
  while read -r DIR; do
    AUTO_TITLE="$(printf '%s' "${DIR//\// - }" | sed 's/\s\+\?\[[^]]*\]\s\+\?//g')"
    DEBUG=1 send_prog -p "DIR: ${DIR}" "Auto title: ${AUTO_TITLE}"
    [[ "${PROMPT_CMD}" =~ "dmenu" ]] && TITLE="$(dmenu -i -p "Title:" <<<'')"
    [[ "${PROMPT_CMD}" =~ "fzf" ]] && read -r -u 3 -p "Title: " TITLE
    [[ -z "${TITLE}" ]] && TITLE="${AUTO_TITLE}"
    printf '%s\n' "${DIR}<${TITLE//[\!\\@#$%^&*\{\}\/<>?\'\":+\`|=]/-}<" >> "${LIBRARY}"
  done 3<&0 < <(printf '%s\n' "${ANIME_DIRS[@]}")
  return 0
}

auto_create() {
  for (( L=0 ; "${L}" < "${#ANIME_DIRS[@]}" ; L++ )) ; do
    DIR="${ANIME_DIRS[${L}]}"
    TITLE="$(printf '%s' "${DIR//\// - }" | sed 's/\s\+\?\[[^]]*\]\s\+\?//g')"
    printf '%s\n' "${DIR}<${TITLE//[\!\\@#$%^&*\{\}\/<>?\'\":+\`|=]/-}<" >> "${LIBRARY}"
  done
}

active_update() {
  send_prog -p "Updating library"
  for (( L=0 ; "${L}" < "${#ANIME_DIRS[@]}" ; L++ )) ; do
    DIR="${ANIME_DIRS[${L}]}"
    TITLE="${ANIME_TITLES[${L}]}"
    EP="${ANIME_EPS[${L}]}"
    [[ -n "${TITLE}" ]] && printf '%s\n' "${DIR}<${TITLE}<${EP}" >> "${LIBRARY}" && continue
    AUTO_TITLE="$(printf '%s' "${DIR//\// - }" | sed 's/\s\+\?\[[^]]*\]\s\+\?//g')"
    DEBUG=1 send_prog -p "DIR:" "    ${DIR}" "Auto title:" "    ${AUTO_TITLE}"
    [[ "${PROMPT_CMD}" =~ "dmenu" ]] && TITLE="$(dmenu -i -p "Title:" <<<'')"
    [[ "${PROMPT_CMD}" =~ "fzf" ]] && read -r -p "Title: " TITLE
    [[ -z "${TITLE}" ]] && TITLE="${AUTO_TITLE}"
    printf '%s\n' "${DIR}<${TITLE//[\!\\@#$%^&*\{\}\/<>?\'\":+\`|=]/-}<${EP}" >> "${LIBRARY}"
  done
  return 0
}

auto_update() {
  send_prog -p "Auto updating library"
  for (( L=0 ; "${L}" < "${#ANIME_DIRS[@]}" ; L++ )) ; do
    printf '%s\n' "${ANIME_DIRS[${L}]}<${ANIME_TITLES[${L}]}<${ANIME_EPS[${L}]}" >> "${LIBRARY}"
  done
}

backup_library() {
  send_prog -p "Backing up library"
  export LIBRARY_BAK="${LIBRARY}.bak"
  export LIBRARY_LOOP="${LIBRARY}.loop"
  readonly LIBRARY_BAK LIBRARY_LOOP
  [[ -e "${LIBRARY_BAK}" ]] && rm "${LIBRARY_BAK}"
  mv "${LIBRARY}" "${LIBRARY_BAK}"
  cp "${LIBRARY_BAK}" "${LIBRARY_LOOP}"
}

build_library() {
  if [[ -e "${LIBRARY}" ]]; then
    [[ "${PROMPT_CMD}" =~ "dmenu" ]] && ANS="$(printf 'Yes\nNo' | dmenu -i -p "Remove Old Library? ")"
    [[ "${PROMPT_CMD}" =~ "fzf" ]] && ANS="$(printf 'Yes\nNo' | fzf --prompt="Remove Old Library? ")"
    [[ "${ANS}" == "Yes" ]] && rm "${LIBRARY}" || return 1
    unset ANS
  fi
  while read -r DIR; do
    if [[ "${FILTERS[*]}" =~ "${DIR##*/}" ]]; then
      send_prog -e "Skipping" "${DIR##*/}"
      continue
    fi
    [[ "${DIR}" == "${BASE_DIR}" ]] && continue
    [[ "${DIR}" =~ \< ]] && continue
    [[ "${RECURSIVE}" -eq 1 ]] && recursive_filter "${DIR}" && continue
    send_prog -p "Adding" "${DIR##*/}"
    ANIME_DIRS+=("${DIR##"${BASE_DIR}"/}")
  done < <(sed 's/\(^.*\)\/.*$/\1/g' "${DIRS_FILE}" | sort -u)
}

clean_up() {
  [[ -e "${DIRS_FILE}" ]] && rm "${DIRS_FILE}"
  [[ "${OPTIONS[*]}" =~ "CLEAN" ]] && rm "${LIBRARY_BAK}"
  [[ "${OPERATION}" == "UPDATE" ]] && rm "${LIBRARY}" "${LIBRARY_LOOP}"
}

compare_libraries() {
  ANIME_DIRS=()
  ANIME_TITLES=()
  ANIME_EPS=()
  send_prog -p "Comparing libraries"
  while IFS='<' read -r DIR TITLE EP ; do
    MATCH=0
    while IFS='<' read -r DIR_B TITLE_B EP_B ; do
      [[ "${DIR}" != "${DIR_B}" ]] && continue
      ANIME_DIRS+=("${DIR_B}")
      ANIME_TITLES+=("${TITLE_B}")
      ANIME_EPS+=("${EP_B}")
      MATCH=1
      CLEAN_DIR="$(printf '%s' "${DIR_B}" | sed 's/\[\|\]\|\&/\\&/g')"
      break
    done < "${LIBRARY_LOOP}"
    [[ "${MATCH}" -eq 1 ]] && sed -i "\>${CLEAN_DIR}<>d" "${LIBRARY_LOOP}"
    [[ "${MATCH}" -eq 1 ]] && continue
    ANIME_DIRS+=("${DIR}")
    [[ "${OPTIONS[*]}" =~ "INTERACTIVE" ]] && \
      ANIME_TITLES+=("") || \
      ANIME_TITLES+=("${TITLE}")
    ANIME_EPS+=("${EP}")
  done < "${LIBRARY}"
}

ep_search() {
  while IFS='<' read -r DIR TITLE EP ; do
    [[ ! -e "${BASE_DIR}/${DIR}/${TRACK##*/}" ]] && continue
    FOUND=1
    TRACK_DIR="${DIR}"
    TRACK_EP="${TRACK##*/}"
    break
  done < "${LIBRARY}"
  [[ "${FOUND}" -eq 1 ]] && return 0 || return 1
}

export_episodes() {
  while read -r EPS; do
    DIR="${EPS%/*}"
    [[ "${FILTERS[*]}" =~ "${DIR##*/}" ]] && continue
    [[ "${DIR}" == "${BASE_DIR}" ]] && continue
    [[ "${DIR}" =~ \< ]] && continue
    [[ "${RECURSIVE}" -eq 1 ]] && recursive_filter "${DIR}" && continue
    EPISODES+=("${EPS}")
  done < <(sort -u "${DIRS_FILE}")
  printf '%s\n' "${EPISODES[@]}" > "${EPISODES_FILE}"
}

file_check() {
  [[ "${1}" == "-S" ]] && return 0
  [[ "${1}" == "--setup" ]] && return 0
  [[ ! -e "${LOG_FILE}" ]] && touch "${LOG_FILE}"
  [[ -e "${EXTERNAL_CONF}" ]] && source "${EXTERNAL_CONF}"
  if [[ -z "${BASE_DIR}" ]]; then
    send_prog -e "Error" "You must set a BASE_DIR in ${EXTERNAL_CONF}"
    return 1
  fi
  [[ ! "fzf dmenu" =~ "${PROMPT_CMD}" ]] && PROMPT_CMD="dmenu"
  [[ "UPDATE BUILD" =~ "${OPERATION}" ]] && [[ -e "${FILTERS_LIST}" ]] && get_filters
  readonly BASE_DIR LIBRARY LOG_FILE CONFIG_DIR EXTERNAL_CONF FILTERS_LIST
  return 0
}

file_search() {
  [[ -e "${EPISODES_FILE}" ]] && find_ep || ep_search
  return "$?"
}

find_ep() {
  DIR="$(grep -F "${TRACK##*/}" "${EPISODES_FILE}")"
  [[ "$?" -eq 0 ]] && FOUND=1 || return 1
  DIR="${DIR#"${BASE_DIR}"/}"
  TRACK_DIR="${DIR%/*}"
  TRACK_EP="${TRACK##*/}"
  return 0
}

get_eps() {
  while read -r EP ; do
    PICK_EPS+=("${EP}")
  done < <(find -L "${BASE_DIR}/${LIBRARY_DIRS[${WATCH_NUM}]}" -mindepth 1 -maxdepth 1 -type f -printf '%P\n' | sort)
}

get_filters() {
  while IFS=$'\n' read -r FILTER ; do
    FILTERS+=("${FILTER}")
  done < "${CONFIG_DIR}/ani-man.filters"
}

get_library() {
  L=0
  while IFS='<' read -r DIR TITLE EP ; do
    LIBRARY_DIRS+=("${DIR}")
    LIBRARY_TITLES+=("$(printf '%03d: ' "${L}")${TITLE}")
    LIBRARY_EPS+=("${EP}")
    L=$((L+1))
  done < "${LIBRARY}"
}

get_log_dirs() {
  EMPTY_LOG=0
  LOG_DIRS=()
  LIBRARY_DIRS=()
  LIBRARY_TITLES=()
  LIBRARY_EPS=()
  while IFS='<' read -r NUM DIR; do
    LOG_DIRS+=("${DIR}")
  done < "${LOG_FILE}"
  [[ -z "${LOG_DIRS[@]}" ]] && EMPTY_LOG=1 && return 1 || return 0
}

get_log_titles() {
  LOG_CHECK=0
  for ((L=0 ; L < "${#LOG_DIRS[@]}"; L++)); do
    DIR="$(grep -F "${LOG_DIRS[${L}]}<" "${LIBRARY}")"
    [[ "$?" -eq 0 ]] && {
      LIBRARY_DIRS+=("${DIR%%<*}")
      LIBRARY_EPS+=("${DIR##*<}")
      DIR="${DIR#*<}"
      LIBRARY_TITLES+=("$(printf '%03d: ' "${L}")${DIR%<*}")
      continue
    }
    LOG_CHECK=1
    CLEAN_DIR="$(printf '%s' "${LOG_DIRS[${L}]}" | sed 's/\[\|\]\|\&/\\&/g')"
    sed -i "\>${CLEAN_DIR}\$>d" "${LOG_FILE}"
  done
  [[ "${LOG_CHECK}" -eq 1 ]] && update_log
}

get_opts() {
  while :; do
    if [[ $# -gt 0 ]]; then
      case "$1" in
        -b|--build)
          OPERATION="BUILD"
          shift
          ;;
        -B|--browse)
          OPERATION="BROWSE"
          shift
          ;;
        -c|--clean)
          OPTIONS+=("CLEAN")
          shift
          ;;
        -d|--debug)
          DEBUG=1
          shift
          ;;
        -h|--help)
          usage
          return 1
          ;;
        -i|--interactive)
          OPTIONS+=("INTERACTIVE")
          shift
          ;;
        -l|--latest)
          OPERATION="WATCH_LATEST"
          shift
          ;;
        -o|--open)
          OPERATION="OPEN"
          shift
          [[ -z "${1}" ]] && { usage ; return 1 ; }
          OPEN="${1}"
          shift
          ;;
        -s|--search)
          OPERATION="SEARCH"
          shift
          [[ -z "${1}" ]] && { usage ; return 1 ; }
          TRACK="${1}"
          shift
          ;;
        -S|--setup)
          OPERATION="SETUP"
          shift
          ;;
        -t|--track)
          OPERATION="TRACK"
          shift
          [[ -z "${1}" ]] && { usage ; return 1 ; }
          TRACK="${1}"
          shift
          ;;
        -u|--update)
          OPERATION="UPDATE"
          shift
          ;;
        -w|--watch)
          OPERATION="WATCH"
          shift
          ;;
        *)
          printf 'Unknown option passed: %s\n' "$1" >&2
          usage
          return 1
          ;;
      esac
    else
      break
    fi
  done
}

get_valid_dirs() {
  send_prog -p "Getting valid shows"
  find -L "${BASE_DIR}" -type f | \
    sed '/^.*\.\(mkv\|mp4\|mpg\|mp2\|mpeg\|mpe\|mpv\|ogg\|webm\|m4p\|m4v\|avi\|wmv\|mov\|qt\|flv\|swf\|avchd\)$/!d' > "${DIRS_FILE}"
}

not_found() {
  [[ "${NOT_FOUND}" -eq 0 ]] && return 0
  send_prog -e "Error" "Could not find" "${TRACK##*/}" "in your library." \
    "Please update your library and try again"
}

opts_handler() {
  case "${OPERATION}" in
    BROWSE)
      setsid -f ${FILE_MANAGER:?File manager not set} "${BASE_DIR}" >/dev/null 2>&1
      ;;
    BUILD)
      get_valid_dirs
      export_episodes
      build_library || return 1
      [[ "${OPTIONS[*]}" =~ "INTERACTIVE" ]] && active_create || auto_create
      clean_up
      ;;
    OPEN)
      setsid -f mpv --script-opts=ani-man-enabled=yes "${OPEN}" >/dev/null 2>&1
      ;;
    SEARCH)
      file_search && return 0 || return 1
      ;;
    SETUP)
      setup_files
      ;;
    TRACK)
      file_search || { not_found ; return 1 ; }
      update_hist
      [[ "${MAX_HISTORY}" -ne 0 ]] && update_log
      ;;
    UPDATE)
      get_valid_dirs
      backup_library
      send_prog -p "Searching for new shows"
      build_library >/dev/null 2>&1
      auto_create
      compare_libraries
      export_episodes
      clean_up
      [[ "${OPTIONS[*]}" =~ "INTERACTIVE" ]] && active_update || auto_update
      ;;
    WATCH)
      get_library
      watch_anime
      ;;
    WATCH_LATEST)
      LOG_CHECK=1
      while [[ "${LOG_CHECK}" -eq 1 ]]; do
        get_log_dirs || break
        get_log_titles
      done
      [[ "${EMPTY_LOG}" -eq 1 ]] && return 1
      watch_anime
      ;;
  esac
}

recursive_filter() {
  SKIP=0
  while IFS="" read -r FILTER ; do
    [[ "${1}" =~ "/${FILTER}/" ]] && SKIP=1 && break
  done < <(printf '%s\n' "${FILTERS[@]}")
  [[ "${SKIP}" -eq 1 ]] && send_prog -e "Skipping" "${1##"${BASE_DIR}"/}" && return 0
  [[ "${SKIP}" -eq 0 ]] && return 1
}

send_prog() {
  case "${DEBUG}" in
    1)
      case "$1" in
        -e)
          B="${R}"
          shift
          ;;
        -p)
          B="${G}"
          shift
          ;;
        *)
          echo "NO OPTION"
          return 1
          ;;
      esac
      printf "${B}%s${E}\n" "${@}"
      ;;
    *)
      case "$1" in
        -e)
          shift
          FIRST="${1}"
          shift
          notify-send -u critical "${FIRST}" "${*}"
          ;;
        -p)
          shift
          FIRST="${1}"
          shift
          notify-send "${FIRST}" "${*}"
          ;;
        *)
          notify-send -u critical "Error" "No option given"
          return 1
          ;;
      esac
      ;;
  esac
}

setup_files() {
  export MPLUG_DIR="${XDG_DATA_HOME:-${HOME}/.local/share}/mplug/github/johndovern/ani-man"
  [[ ! -d "${MPLUG_DIR}" ]] && usage && return 1
  [[ ! -d "${CONFIG_DIR}" ]] && mkdir -p "${CONFIG_DIR}"
  cp "${MPLUG_DIR}/conf/bash/ani-man"* "${CONFIG_DIR}"
  DEBUG=1 send_prog -p "Please see" "    https://github.com/johndovern/ani-man" "for additional setup instructions."
}

update_hist() {
  TRACK_CLEAN_DIR="$(printf '%s' "${TRACK_DIR}" | sed 's/\[\|\]\|\&/\\&/g')"
  TRACK_CLEAN_EP="$(printf '%s' "${TRACK_EP}" | sed 's/\[\|\]\|\&/\\&/g')"
  sed -i "\>${TRACK_CLEAN_DIR}<> s>\(^.*<\).*\$>\1${TRACK_CLEAN_EP}>g" "${LIBRARY}"
  sed -i "\>${TRACK_CLEAN_DIR}\$>d" "${LOG_FILE}"
}

update_log() {
  [[ -n "${TRACK_DIR}" ]] && L=1 || L=0
  while IFS='<' read -r NUM EP ; do
    [[ -n "${TRACK_DIR}" ]] && [[ "${NUM}" -eq "${MAX_HISTORY}" ]] && continue
    [[ -z "${EP}" ]] && continue
    NEW_LOG+=("$((L+1))<${EP}")
    L=$((L+1))
  done < "${LOG_FILE}"
  [[ -n "${TRACK_DIR}" ]] && printf '%s' "1<${TRACK_DIR}" > "${LOG_FILE}"
  [[ -n "${TRACK_DIR}" ]] && printf '%s\n' "${NEW_LOG[@]}" >> "${LOG_FILE}"
  [[ -z "${TRACK_DIR}" ]] && printf '%s\n' "${NEW_LOG[@]}" > "${LOG_FILE}"
}

usage() {
  cat << EOF
  Usage: ani-man [OPTION]

  Options:
  -b, --build           Build the LIBRARY file. Use -i to build this file
                        interactively.
  -B, --browse          Browse your BASE_DIR. Set your file manager of choice
                        in the ani-man.conf like so:
                            FILE_MANAGER="st -e lf"
                        TUI file managers like lf, nnn, ranger, etc. typically
                        must be started in a terminal emulator.
  -c, --clean           Use this flag with -u if you do not want to keep
                        a backup of your library.
  -d, --debug           The default behavior of this script is to send
                        messages via notify-send. This is probably not what
                        most people want but it's what I use so it is the
                        default. Using this flag will send output to the
                        terminal instead. If you want this to be the default
                        behavior set DEBUG=1 in ani-man.conf.
  -h, --help            Display this message and exit.
  -i, --interactive     Use when building or updating your library.
                        This will make the process interactive. By default
                        ani-man tries to set the title of a dir to something
                        sane. See the man page or github for more detailed info
                        about this. If you prefer to set the title value
                        yourself then use this flag. If run in a terminal you
                        will see what the auto generated title would be if you
                        do not enter anything into the dmenu prompt by pessing
                        ESC.
  -l, --latest          List your latest tracked anime to resume watching.
  -o, --open [FILE]     This is a sort of wrapper for mpv which will also track
                        the anime when closed.
  -s, --search [FILE]   Take a file path and check if it is in your BASE_DIR.
                        Returns 0 if successful or 1 if the file is not in in
                        your BASE_DIR.
  -S, --setup           If you installed ani-man via MPlug you want to use this
                        flag post install. No need to run more than once.
  -t, --track [FILE]    This will track the given FILE. It is best if the
                        the given FILE is the full path to the file. If FILE is
                        a relative path then ani-man will attempt to find this
                        file in one of the dirs in your library. If this is not
                        possible you will be informed. The most likely reason
                        that this would happen is that the file is in a dir
                        that has been filtered or it is a new dir that has not
                        been added to your library. In this case update your
                        library and attempt to track again. FILE should be a
                        file somewhere in your BASE_DIR otherwise it will be
                        impossible to track.
  -u, --update          This will update your library file to match any new or
                        renamed directories. If the directory name has not
                        changed your tracked episodes will carry over. If this
                        is not a new directory but one that has been renamed it
                        will be treated as new and no episode tracking will be
                        carried over.
  -w, --watch           List all titles in your library. If the chosen title
                        is being tracked then the last tracked episode will
                        begin playing in mpv. This will also turn on tracking
                        for ani-man.lua so when you close the video it will be
                        recorded in your library and your history. If this is a
                        title that has no tracked episode then a list of all
                        episodes found in the title's dir will be listed for
                        you to choose from.
EOF
}

watch_anime() {
  [[ "${PROMPT_CMD}" =~ "dmenu" ]] && WATCH="$(printf '%s\n' "${LIBRARY_TITLES[@]}" | dmenu -i -l 20 -p "Watch:")"
  [[ "${PROMPT_CMD}" =~ "fzf" ]] && WATCH="$(printf '%s\n' "${LIBRARY_TITLES[@]}" | fzf --prompt="Watch:")"
  if [[ -n "${WATCH}" ]]; then
    WATCH_NUM="$(printf '%s' "${WATCH}" | sed 's/^0\{1,2\}\?\([0-9]\+\):.*$/\1/g')"
    if [[ -z "${LIBRARY_EPS[${WATCH_NUM}]}" ]]; then
      get_eps
      [[ "${PROMPT_CMD}" =~ "dmenu" ]] && PICK_EP="$(printf '%s\n' "${PICK_EPS[@]}" | dmenu -i -l 20 -p "Watch:")"
      [[ "${PROMPT_CMD}" =~ "fzf" ]] && PICK_EP="$(printf '%s\n' "${PICK_EPS[@]}" | fzf --prompt="Watch:")"
      [[ -z "${PICK_EP}" ]] && return 1
      cd "${BASE_DIR}/${LIBRARY_DIRS[${WATCH_NUM}]}" || return 1
      setsid -f mpv --script-opts=ani-man-enabled=yes "${BASE_DIR}/${LIBRARY_DIRS[${WATCH_NUM}]}/${PICK_EP}" >/dev/null 2>&1
    else
      cd "${BASE_DIR}/${LIBRARY_DIRS[${WATCH_NUM}]}" || return 1
      setsid -f mpv --script-opts=ani-man-enabled=yes "${BASE_DIR}/${LIBRARY_DIRS[${WATCH_NUM}]}/${LIBRARY_EPS[${WATCH_NUM}]}" >/dev/null 2>&1
    fi
  fi
}

main() {
  export R="\e[0;31m"
  export G="\e[0;32m"
  export E="\e[0m"

  file_check || return 1
  get_opts "${@}" || return 1
  opts_handler || return 1
}

main "${@}" && exit 0 || exit 1
